#!/usr/bin/env perl

use strict;
use warnings;
use autodie qw(open);

use AnyEvent::Socket qw(tcp_server);
use EV;
use Log::Dispatch::Null;
use SaharaSync::Clientd;
use SaharaSync::Clientd::Config;
use Test::More;

my $upstream      = $ENV{'_CLIENTD_UPSTREAM'};
my $port          = $ENV{'_CLIENTD_PORT'};
my $root          = $ENV{'_CLIENTD_ROOT'};
my $poll_interval = $ENV{'_CLIENTD_POLL_INTERVAL'};
my $client_num    = $ENV{'_CLIENTD_NUM'};

my $log_config = {
    type => 'Null',
};

if($ENV{'TEST_CLIENTD_DEBUG'}) {
    my $color = $client_num == 1 ? "\e[32;1m" : "\e[31;1m";

    $log_config = {
        type      => 'Screen',
        newline   => 1,
        stderr    => 1,
        callbacks => [sub {
            my %params = @_;

            return "${color}(client - $client_num) $params{'message'}\033[0m";
        }],
    };
}
$log_config->{'min_level'} = 'debug';

my $config = SaharaSync::Clientd::Config->new(
    upstream      => $upstream,
    sync_dir      => $root,
    username      => 'test',
    password      => 'abc123',
    log           => $log_config,
    poll_interval => $poll_interval,
);

# make sure Test::TCP can talk to us
tcp_server '127.0.0.1', $port, sub {
    my ( $fh ) = @_;

    close $fh;
};

my $daemon = SaharaSync::Clientd->new($config);

my $num_errors = 0;

my $dummy_output = Log::Dispatch::Null->new(
    min_level => 'warning',
);
$dummy_output->add_callback(sub {
    my ( %params ) = @_;

    $num_errors++;
    diag($params{'message'});

    return $params{'message'};
});
$daemon->log->add($dummy_output);

$EV::DIED = sub {
    $num_errors++;
    diag($@);
};

note("test client $client_num is running as PID $$");

$daemon->run;

my $pipe;
open $pipe, '>&3';
print $pipe $num_errors;
